"""
Django settings for worke_consultation_service project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from worke_consultation_service.config import config as cfg
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$-kxh&7!3pt_w_+=1bt2c4%-@8+6pwc(a01f&hw6!28gm#@6i2"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(cfg.get("common", "DEBUG", fallback=True))

# Sentry Settings
sentry_sdk.init(
    dsn=cfg.get("sentry", "DSN"),
    debug=bool(cfg.get("common", "SENTRY_DEBUG", fallback=True)),
    integrations=[DjangoIntegration()],
    traces_sample_rate=float(cfg.get("sentry", "SAMPLE_RATE")),
    send_default_pii=True,
)

ALLOWED_HOSTS = [
    "localhost",
    "0.0.0.0",
    "127.0.0.1",
    "192.168.0.112",
    "services.worke.io",
    "staging.worke.io",
]


# Application definition

INSTALLED_APPS = [
    "consultation",
    "settings",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "django_celery_results",
    "drf_yasg",
    "silk",
    "rest_framework_simplejwt",
    "django_prometheus",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "silk.middleware.SilkyMiddleware",
    "common.middleware.jwt_middleware.JWTMiddleware",  # to check for token add user field in request
    "common.middleware.new_relic_middleware.NewRelicMiddleware",
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "worke_consultation_service.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "common/email_templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "worke_consultation_service.wsgi.application"

# CORS_ALLOWED_ORIGINS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": cfg.get("postgres", "DB_NAME"),
        "USER": cfg.get("postgres", "DB_USER"),
        "PASSWORD": cfg.get("postgres", "DB_PASSWORD"),
        "HOST": cfg.get("postgres", "DB_HOST"),
        "PORT": cfg.get("postgres", "DB_PORT"),
        "OPTIONS": {"options": "-c search_path=" + cfg.get("postgres", "DB_SCHEMA")},
    }
}

DATABASE_ROUTERS = [
    "common.db_routers.DefaultRouter",
]


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Restframework backends
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("common.authentication.IsAuthenticatedOverride",),
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "EXCEPTION_HANDLER": "common.exception.customExceptionHandler",
    # Throttle Settings
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '3/day',
    #     'user': '5/day'
    # },
}

# Authentication backends
AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)

# Celery Settings
# CELERY_RESULT_BACKEND = cfg.get("celery", "CELERY_RESULT_BACKEND")
# CELERY_CACHE_BACKEND = cfg.get("celery", "CELERY_CACHE_BACKEND")
# CELERY_BROKER_URL = cfg.get("celery", "CELERY_BROKER_URL")
# CELERY_ACCEPT_CONTENT = [cfg.get("celery", "CELERY_ACCEPT_CONTENT")]
# CELERY_TASK_SERIALIZER = cfg.get("celery", "CELERY_TASK_SERIALIZER")
# CELERY_RESULT_SERIALIZER = cfg.get("celery", "CELERY_RESULT_SERIALIZER")
# CELERY_TIMEZONE = cfg.get("celery", "CELERY_TIMEZONE")

# Email Settings
DEFAULT_FROM_EMAIL = cfg.get("email", "DEFAULT_FROM_EMAIL")
DEFAULT_REPLY_EMAIL = cfg.get("email", "DEFAULT_REPLY_EMAIL")
EMAIL_BACKEND = cfg.get("email", "EMAIL_BACKEND")
EMAIL_HOST = cfg.get("email", "EMAIL_HOST")
EMAIL_HOST_USER = cfg.get("email", "EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = cfg.get("email", "EMAIL_HOST_PASSWORD")
EMAIL_PORT = cfg.get("email", "EMAIL_PORT")
EMAIL_USE_TLS = cfg.get("email", "EMAIL_USE_TLS")

# Swagger Settings
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": cfg.get("swagger", "API_KEY"),
            "name": cfg.get("swagger", "AUTHORIZATION"),
            "in": cfg.get("swagger", "HEADER"),
        },
    }
}

JWT_SECRET = cfg.get("jwt", "JWT_SECRET")
